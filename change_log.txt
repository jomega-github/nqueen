Change log for nqueen.py.

- Version 2.4
Date: 4/6/2021
* initialize_admissible_rows() now returns True if there are
admissible rows and False otherwise. It now longer sets a
fake value of try_row to signal this.
* store_and_check_for_solution() places the current Queen on the board. If
this is a solution return True; otherwise return False
* search() no longer has an if-statement looking for the fake value
of try_row. Instead if calls store_and_check_for_solution().
If that returns False then initialize_admissible_rows() is called.
If that returns true then searching continues. Otherwise retreat()
is called.
If store_and_check_for_solution() returns True then we have a solution.
If we are finding all solutions then retreat() is called.
retreat() is passed whether there has been a success yet or not.
* Spelling changes.

- Version 2.3
Date: 4/6/2021
* retreat() redone for clarity and efficiency. retreat_wrapper removed.

- Version 2.2
Date: 4/6/2021
* Removed all debug and logging!
* Reset of node_count to 0 in repeat_wrapper was removed as unnecessary.
* Update of list of lists unnecessary, so removed.
* The admissible_rows did not need to be saved when not continuing
when no more rows to try in initialize_admissible_rows(), so relocated.
* Some statements moved for readability.
* The args to run() were shadowing the globals. So renamed and made
very short. run() only gets called by hand if profiling the code.
* Output statements made better English.

- Version 2.1
Date: 4/6/2021
* Fixed a number of PEP8 and typo problems.
* Removed trailing semicolon. (The python compiler had accepted that!)
* List comprehension "_" variable instead of i,j.
* Unnecessary parens removed.

- Version 2.0
Date: 4/5/2021
* I took the range out of the filter in initialize_admissible_rows()
and that gave back just 0.4 secs; as in version 1.10.
* I broke out the code in that function that gets the search_list
so I could try various algorithms for that. No real improvement.

- Version 1.10
Date: 4/4/2021
* An experiment with numpy. No improvement in speed.
  I could not figure out how to benefit from vectorization and broadcasting.

- Version 1.9
Date: 4/4/2021
* Removed globals from inside the show functions.
* Stopped allocating space at the top for structures because they are
allocated in initialize().

- Version 1.8
Date: 4/4/2021
* Same as 1.7 but now with debug statements added that can be disabled from
compilation into byte code by running "python -O ...". With that option the
timings are the same as version 1.7.

- Version 1.7
Date: 4/3/2021
* Implemented the admissible row idea.

- Version 1.6
Date: 4/3/2021
* A version I wanted to save on the way to optimizing by saving the
admissible rows per column.

- Version 1.5
Date: 4/2/2021
* Fixed the initializations of slash_code and backslash_code
so that they match the math way of thinking of the arrays, which
is almost the python way, and flipped the formulas between these
two so that what they contain matches their name!

- Version 1.4
Date: 4/2/2021
* Converted entirely to using 0 indexing.  Note that this causes the
show_progress output to have a -1 instead of 0 and in fact all the numbers
are one less. The -1 makes the output look like it has two "-" if read
incorrectly.

- Version 1.3
Date: 4/1/2021
* Added timing.
* Added optimization helper matrices.
* Changed some naming of variables to make clear when row and column
were being used.
* New function optimized_under_attack which does a simple test
of the boolean arrays at (sr,sc). This takes out a loop and math test.
* Function admissible changed to call optimized_under_attack.

- Version 1.2
Date: 3/30/2021
* Added new options.
  --show_progress, --show_node_count, --show_total_node_count,
  --show_count_only
  The default is now to not show progress, not show count only,
  not show node count and not show total node count.
* Fixed repeating code by writing new function retreat_wrapper.
* Fixed testing of number_of_problems and its message. This can be 1.
* Fixed output "Looking for a ..." to be correct when looking for all.
* Put separator after board printout so they do not run together if
multiple solutions.

- Version 1.1
Date:3/30/2021
* Added ability to count all solutions. -all option.
* Added count of all nodes for each solution.
* Added solution count.

- Version 1.0
Date:3/28/2021
*Initial version.  My idea was to take a C++ version I wrote for N-Queens
some 20 years ago and convert it to Python. This version stuck as close
as possible to the C++ version.
